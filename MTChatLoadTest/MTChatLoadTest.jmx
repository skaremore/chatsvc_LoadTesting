<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Infor-ChatLoadTest-OP" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="DATA_FOLDER" elementType="Argument">
            <stringProp name="Argument.name">DATA_FOLDER</stringProp>
            <stringProp name="Argument.value">${__P(DataFolder,MTChatLoadTest\\\\Data)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_FILE" elementType="Argument">
            <stringProp name="Argument.name">USER_FILE</stringProp>
            <stringProp name="Argument.value">${__P(UserFile,MTChatLoadTest\\\\10users-CI01.csv)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MaxUsersPerTenant" elementType="Argument">
            <stringProp name="Argument.name">MaxUsersPerTenant</stringProp>
            <stringProp name="Argument.value">500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NumThreads" elementType="Argument">
            <stringProp name="Argument.name">NumThreads</stringProp>
            <stringProp name="Argument.value">${__P(Threads,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ThreadLoops" elementType="Argument">
            <stringProp name="Argument.name">ThreadLoops</stringProp>
            <stringProp name="Argument.value">${__P(ThreadLoops,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LoopsPerUser" elementType="Argument">
            <stringProp name="Argument.name">LoopsPerUser</stringProp>
            <stringProp name="Argument.value">${__P(Loops,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UPLOAD_FILE" elementType="Argument">
            <stringProp name="Argument.name">UPLOAD_FILE</stringProp>
            <stringProp name="Argument.value">uploadfiles</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Chat_Load_Test" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1548243781000</longProp>
        <longProp name="ThreadGroup.end_time">1548243781000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="server" elementType="Argument">
              <stringProp name="Argument.name">server</stringProp>
              <stringProp name="Argument.value">mingle-ci01-portal.mingle.awsdev.infor.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="tenantId" elementType="Argument">
              <stringProp name="Argument.name">tenantId</stringProp>
              <stringProp name="Argument.value">MNGQACI1_AX1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="userName" elementType="Argument">
              <stringProp name="Argument.name">userName</stringProp>
              <stringProp name="Argument.value">TestUser0001@infor.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="password" elementType="Argument">
              <stringProp name="Argument.name">password</stringProp>
              <stringProp name="Argument.value">Loadtest1!</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">10users-CI01.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">server,tenantId,userName,password,FILE_TYPE</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get User Login from CSV" enabled="false">
          <stringProp name="BeanShellSampler.query">String line = &quot;${__StringFromFile(${USER_FILE})}&quot;;
//log.info(&quot;#### Thread: ${__threadNum}  DataRow: &quot; + line);

if (line != null) {
	StringTokenizer st = new StringTokenizer(line, &quot;,&quot;);
	
	vars.put(&quot;server&quot;, st.nextToken());
	vars.put(&quot;tenantId&quot;, st.nextToken());
	vars.put(&quot;userName&quot;, st.nextToken());
	vars.put(&quot;password&quot;, st.nextToken());
	//vars.put(&quot;FILE_TYPE&quot;, st.nextToken());
}
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Ming.le Portal Login" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get User Login from CSV" enabled="false">
            <stringProp name="BeanShellSampler.query">String line = &quot;${__StringFromFile(${USER_FILE})}&quot;;
//log.info(&quot;#### Thread: ${__threadNum}  DataRow: &quot; + line);

if (line != null) {
	StringTokenizer st = new StringTokenizer(line, &quot;,&quot;);
	
	vars.put(&quot;server&quot;, st.nextToken());
	vars.put(&quot;tenantId&quot;, st.nextToken());
	vars.put(&quot;userName&quot;, st.nextToken());
	vars.put(&quot;password&quot;, st.nextToken());
	vars.put(&quot;FILE_TYPE&quot;, st.nextToken());
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PortalURL" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${tenantId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="REE - AuthMode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">AuthMode</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input id=&quot;optionForms&quot; type=&quot;hidden&quot; name=&quot;AuthMethod&quot; value=&quot;(.+?)&quot;/&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NotFound</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="REE - FormsAuthAction" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">FormsAuthAction</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;form id=&quot;options&quot;  method=&quot;post&quot; action=&quot;(.+?)&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NotFound</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="REE - IdentityProvider" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IdentityProvider</stringProp>
              <stringProp name="RegexExtractor.regex">CloudIdentity</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default">NotFound</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="REE - RelayState" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">RelayState</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;RelayState&quot; value=&quot;(.*?)&quot;/&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NotFound</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="REE - SAMLRequest" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SAMLRequest</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;SAMLRequest&quot; value=&quot;(.*?)&quot;/&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NotFound</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="REE - RedirectToIdpVal" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">RedirectToIdpVal</stringProp>
              <stringProp name="RegexExtractor.regex">/idp/(.+?)/resume/idp/prp.ping</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="REE - RedirectToIdpServerName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
              <stringProp name="RegexExtractor.refname">RedirectToIdpServerName</stringProp>
              <stringProp name="RegexExtractor.regex">https:[/][/](.+?)/IdpBridgeSSO</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NotFound</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="REE - CloudIdentitiesServer_withRedirect" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">CloudIdentitiesServer_wRedirect</stringProp>
              <stringProp name="RegexExtractor.regex">onclick=&quot;javascript:return chk[(][&apos;]http:[/][/](.*?)&apos;,&apos;CloudIdentity&apos;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NotFound</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="REE - CloudIdentitiesServer_withoutRedirect" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">CloudIdentitiesServer_woRedirect</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;form method=&quot;post&quot; action=&quot;https:[/][/](.+?)/idp/SSO.saml2&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NotFound</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - AuthMode is not &quot;FormsAuth&quot;" enabled="true">
            <stringProp name="IfController.condition">&quot;${AuthMode}&quot; != &quot;FormsAuthentication&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller: identityProvider is &quot;CloudIdentity&quot;" enabled="true">
              <stringProp name="IfController.condition">&quot;${IdentityProvider}&quot; == &quot;CloudIdentity&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RedirectToIdp" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">http://${CloudIdentitiesServer_wRedirect}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">id</stringProp>
                    </elementProp>
                    <elementProp name="identityProviderType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">CloudIdentity</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">identityProviderType</stringProp>
                    </elementProp>
                    <elementProp name="resume" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">/idp/${RedirectToIdpVal}/resume/idp/prp.ping</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">resume</stringProp>
                    </elementProp>
                    <elementProp name="displayValue" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">Cloud Identities</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">displayValue</stringProp>
                    </elementProp>
                    <elementProp name="rememberMe" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rememberMe</stringProp>
                    </elementProp>
                    <elementProp name="tenantInfo" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">INFOROSSCIM2_TST</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">tenantInfo</stringProp>
                    </elementProp>
                    <elementProp name="sl" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">sl</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${RedirectToIdpServerName}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/RedirectToIdp</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="REE - RelayState" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">RelayState</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;RelayState&quot; value=&quot;(.*?)&quot;/&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NotFound</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="REE - SAMLRequest" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">SAMLRequest</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;SAMLRequest&quot; value=&quot;(.*?)&quot;/&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NotFound</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;cloudIdentitiesServer&quot;, &quot;${CloudIdentitiesServer_wRedirect}&quot;);</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller: Set CloudIdentitiesServer" enabled="true">
              <stringProp name="IfController.condition">&quot;${CloudIdentitiesServer_wRedirect}&quot; == &quot;NotFound&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;cloudIdentitiesServer&quot;, &quot;${CloudIdentitiesServer_woRedirect}&quot;);</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SSO.saml2" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="SAMLRequest" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${SAMLRequest}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">SAMLRequest</stringProp>
                  </elementProp>
                  <elementProp name="RelayState" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${RelayState}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">RelayState</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${cloudIdentitiesServer}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/idp/SSO.saml2</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">207.20000000000002</stringProp>
                <stringProp name="ConstantTimer.delay">414.40000000000003</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="REE - Idpvalue" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">Idpvalue</stringProp>
                <stringProp name="RegexExtractor.regex">method=&quot;POST&quot; action=&quot;/idp/(.*?)/resumeSAML20/idp/SSO.ping&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SSO.ping" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="pf.username" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${userName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">pf.username</stringProp>
                  </elementProp>
                  <elementProp name="pf.pass" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${password}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">pf.pass</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${cloudIdentitiesServer}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/idp/${Idpvalue}/resumeSAML20/idp/SSO.ping</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">2334.400000000001</stringProp>
                <stringProp name="ConstantTimer.delay">2668.800000000001</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="REE - SSOServer" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">SSOServer</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;form method=&quot;post&quot; action=&quot;https:[/][/](.+?):443/sp/ACS.saml2&quot;&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NotFound</stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="REE - SAMLResponse" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">SAMLResponse</stringProp>
                <stringProp name="RegexExtractor.regex">name=&quot;SAMLResponse&quot; value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ACS.saml2" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="RelayState" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${RelayState}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">RelayState</stringProp>
                  </elementProp>
                  <elementProp name="SAMLResponse" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${SAMLResponse}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">SAMLResponse</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SSOServer}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/sp/ACS.saml2</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">792.8000000000001</stringProp>
                <stringProp name="ConstantTimer.delay">1585.6000000000001</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="REE - wa" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">wa</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;wa&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">Not Found</stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="REE - wresult" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">wresult</stringProp>
                <stringProp name="RegexExtractor.regex">(?s)&lt;input type=&quot;hidden&quot; name=&quot;wresult&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">Not Found</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="REE - wctx" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">wctx</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;wctx&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">Not Found</stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - AuthMode is &quot;FormsAuth&quot;" enabled="true">
            <stringProp name="IfController.condition">&quot;${AuthMode}&quot; == &quot;FormsAuthentication&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FormsAuthAction" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="UserName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${userName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">UserName</stringProp>
                  </elementProp>
                  <elementProp name="Password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${password}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">Password</stringProp>
                  </elementProp>
                  <elementProp name="AuthMethod" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">FormsAuthentication</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">AuthMethod</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${FormsAuthAction}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">2334.400000000001</stringProp>
                <stringProp name="ConstantTimer.delay">2668.800000000001</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="REE - wa" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">wa</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;wa&quot; value=&quot;(.+?)&quot; /&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">Not Found</stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="REE - wresult" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">wresult</stringProp>
                <stringProp name="RegexExtractor.regex">(?s)&lt;input type=&quot;hidden&quot; name=&quot;wresult&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">Not Found</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="REE - wctx" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">wctx</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;wctx&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">Not Found</stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PortalServer" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="wa" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">wsignin1.0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">wa</stringProp>
              </elementProp>
              <elementProp name="wctx" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">rm=0&amp;id=passive&amp;ru=%2f${tenantId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">wctx</stringProp>
              </elementProp>
              <elementProp name="wresult" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${__unescapeHtml(${wresult})}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">wresult</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
            <stringProp name="RandomTimer.range">2334.400000000001</stringProp>
            <stringProp name="ConstantTimer.delay">2668.800000000001</stringProp>
          </UniformRandomTimer>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="REE - BearerToken" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">BearerToken</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;Token&quot;:&quot;(.+?)&quot;,&quot;IsEnablePendo&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegEx_TenantId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">TenantId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;Tenant&quot;:&quot;(.+?)&quot;,</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NO_TENANT-${Path}-${Email}</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegEx_Identity" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Identity</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;Username&quot;:&quot;(.+?)&quot;,&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NO_IDENTITY-${Path}-${Email}</stringProp>
            <stringProp name="RegexExtractor.match_number">$1$</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegEx_ChatEndpoint" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ChatEndpoint</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;ChatEndpoint&quot;:&quot;(.+?)&quot;,&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NO_ENDPOINT-${Path}-${Email}</stringProp>
            <stringProp name="RegexExtractor.match_number">$1$</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegEx_IDMEndpoint" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">IDMEndpoint</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;ChatEndpoint&quot;:&quot;(.+?)/minglechat&quot;,&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">$1$</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Get Chat users and User Profile" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US</stringProp>
              </elementProp>
              <elementProp name="X-Infor-Chat-TenantId" elementType="Header">
                <stringProp name="Header.name">X-Infor-Chat-TenantId</stringProp>
                <stringProp name="Header.value">${TenantId}</stringProp>
              </elementProp>
              <elementProp name="X-Infor-Chat-Identity2" elementType="Header">
                <stringProp name="Header.name">X-Infor-Chat-Identity2</stringProp>
                <stringProp name="Header.value">${Identity}</stringProp>
              </elementProp>
              <elementProp name="X-Infor-Chat-Bearer-Token" elementType="Header">
                <stringProp name="Header.name">X-Infor-Chat-Bearer-Token</stringProp>
                <stringProp name="Header.value">${BearerToken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Infor-Chat-deviceID</stringProp>
                <stringProp name="Header.value">18347ade-8b87-d1d0-1b5d-78dd4a4de02d</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Infor-RequestId</stringProp>
                <stringProp name="Header.value">&gt;portal.35.22.10</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="*TEST* HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Infor-Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Infor-Chat-TenantId</stringProp>
                <stringProp name="Header.value">${TenantId}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Infor-Chat-Identity2</stringProp>
                <stringProp name="Header.value">${Identity}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Chat User Profile" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${ChatEndpoint}/api/v1/user/profile</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-TenantId" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-TenantId</stringProp>
                  <stringProp name="Header.value">${TenantId}</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-Identity2" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-Identity2</stringProp>
                  <stringProp name="Header.value">${Identity}</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-Bearer-Token" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-Bearer-Token</stringProp>
                  <stringProp name="Header.value">${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-deviceID</stringProp>
                  <stringProp name="Header.value">18347ade-8b87-d1d0-1b5d-78dd4a4de02d</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Infor-RequestId</stringProp>
                  <stringProp name="Header.value">&gt;portal.35.22.10</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse UserGuid" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">UserGuid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.userGuid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_USERGUID</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse FirstName" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">FirstName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.firstName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_USERGUID-${Path}-${Email}</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">String respCode = SampleResult.getResponseCode();

if (SampleResult.isResponseCodeOK())
{
	String userGuid = vars.get(&quot;UserGuid&quot;);

	
	String errorMsg = null;
	
	if (userGuid.equals(&quot;NO_USERGUID&quot;))
	{
		log.info(&quot;@@@@ Unable to get User profile -  [${TenantId}]  User: [${Email}]  Identity: [${Identity}]&quot;);
	}
	
	else
	{
		log.info(&quot;&gt;&gt;&gt;&gt; Get User Profile: [Tenant: ${TenantId}] ${UserGuid} , done by User: [${Email}]  Identity: [${Identity}]&quot;);
	}
	
	
}
else
{
	SampleResult.setSuccessful(false);
	SampleResult.setStartNextThreadLoop(true);
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Chat Teammates" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${ChatEndpoint}/api/v1/admin/teammates?from=0&amp;to=${MaxUsersPerTenant}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-TenantId" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-TenantId</stringProp>
                  <stringProp name="Header.value">${TenantId}</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-Identity2" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-Identity2</stringProp>
                  <stringProp name="Header.value">${Identity}</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-Bearer-Token" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-Bearer-Token</stringProp>
                  <stringProp name="Header.value">${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-deviceID</stringProp>
                  <stringProp name="Header.value">18347ade-8b87-d1d0-1b5d-78dd4a4de02d</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Infor-RequestId</stringProp>
                  <stringProp name="Header.value">&gt;portal.35.22.10</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">log.info(&quot;&gt;&gt;&gt;&gt; Getting Chat users for Tenant: [${TenantId}] for use by: [${Email}] ... &quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse Teammate List for Guid" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">TeammateGuids1_${TenantId}</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">.teammatesList[*].userGuid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="TestPlan.comments">TeammateGuids_matchNr contains size of the list (should be == ${MaxUsersPerTenant}); Each item is: TeammateGuids_TenantId_#</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No teammates found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse Teammate List for Guid" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">TeammateGuids2_${TenantId}</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">.teammatesList[*].userGuid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="TestPlan.comments">TeammateGuids_matchNr contains size of the list (should be == ${MaxUsersPerTenant}); Each item is: TeammateGuids_TenantId_#</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No teammates found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse Teammate List for Guid" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">TeammateGuids3_${TenantId}</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">.teammatesList[*].userGuid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="TestPlan.comments">TeammateGuids_matchNr contains size of the list (should be == ${MaxUsersPerTenant}); Each item is: TeammateGuids_TenantId_#</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No teammates found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse Teammate List for Guid" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">TeammateGuids4_${TenantId}</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">.teammatesList[*].userGuid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="TestPlan.comments">TeammateGuids_matchNr contains size of the list (should be == ${MaxUsersPerTenant}); Each item is: TeammateGuids_TenantId_#</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No teammates found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse Teammate List for Guid" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">TeammateGuids5_${TenantId}</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">.teammatesList[*].userGuid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="TestPlan.comments">TeammateGuids_matchNr contains size of the list (should be == ${MaxUsersPerTenant}); Each item is: TeammateGuids_TenantId_#</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No teammates found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">String respCode = SampleResult.getResponseCode();

if (SampleResult.isResponseCodeOK())
{
	String tenant = vars.get(&quot;TenantId&quot;);
	String max1 = vars.get(&quot;TeammateGuids1_&quot; + tenant + &quot;_matchNr&quot;);
	String max2 = vars.get(&quot;TeammateGuids2_&quot; + tenant + &quot;_matchNr&quot;);
	String max3 = vars.get(&quot;TeammateGuids3_&quot; + tenant + &quot;_matchNr&quot;);
	String max4 = vars.get(&quot;TeammateGuids4_&quot; + tenant + &quot;_matchNr&quot;);
	String max5 = vars.get(&quot;TeammateGuids5_&quot; + tenant + &quot;_matchNr&quot;);

	
	vars.put(&quot;NumTenantUsers1&quot;, max1);
	
	vars.put(&quot;NumTenantUsers2&quot;, max2);
	
	vars.put(&quot;NumTenantUsers3&quot;, max3);
	
	vars.put(&quot;NumTenantUsers4&quot;, max4);
	vars.put(&quot;NumTenantUsers5&quot;, max5);
	//log.info(&quot;#### Num tenants for &quot; + tenant + &quot; = &quot; + max);
	
	if (max1 == null || Integer.valueOf(max1) &lt;= 0 || max2==null || Integer.valueOf(max2) &lt;= 0)
	{
		String errorMsg = &quot;No teammates found&quot;;
		log.error(&quot;@@@@ &quot; + errorMsg + &quot; for: [${TenantId}]  User: [${Email}]  Identity: [${Identity}]&quot;);
		
	     SampleResult.setSuccessful(false);
	     SampleResult.setResponseMessage(errorMsg);
	     SampleResult.setStartNextThreadLoop(true);
	}
}
else
{
	SampleResult.setSuccessful(false);
	SampleResult.setStartNextThreadLoop(true);
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get Random Teammate Guid" enabled="true">
            <stringProp name="BeanShellSampler.query">// get a random teammate guid
import java.util.concurrent.ThreadLocalRandom;

int usersPerTenant1 = Integer.valueOf(vars.get(&quot;NumTenantUsers1&quot;));
int usersPerTenant2 = Integer.valueOf(vars.get(&quot;NumTenantUsers2&quot;));
int usersPerTenant3 = Integer.valueOf(vars.get(&quot;NumTenantUsers3&quot;));
int usersPerTenant4 = Integer.valueOf(vars.get(&quot;NumTenantUsers4&quot;));
int usersPerTenant5 = Integer.valueOf(vars.get(&quot;NumTenantUsers5&quot;));
int rnd1 = usersPerTenant1 &lt;= 1 ? 1 : ThreadLocalRandom.current().nextInt(1, usersPerTenant1);
int rnd2 = usersPerTenant2 &lt;= 1 ? 1 : ThreadLocalRandom.current().nextInt(1, usersPerTenant2);
int rnd3 = usersPerTenant3 &lt;= 1 ? 1 : ThreadLocalRandom.current().nextInt(1, usersPerTenant3);
int rnd4 = usersPerTenant4 &lt;= 1 ? 1 : ThreadLocalRandom.current().nextInt(1, usersPerTenant4);
int rnd5 = usersPerTenant5 &lt;= 1 ? 1 : ThreadLocalRandom.current().nextInt(1, usersPerTenant5);
String tenant = vars.get(&quot;TenantId&quot;);
String guid1 = vars.get(&quot;TeammateGuids1_&quot; + tenant + &quot;_&quot; + rnd1); // get that random teammate&apos;s guid
String guid2 = vars.get(&quot;TeammateGuids2_&quot; + tenant + &quot;_&quot; + rnd2); // get that random teammate&apos;s guid
String guid3 = vars.get(&quot;TeammateGuids1_&quot; + tenant + &quot;_&quot; + rnd1); // get that random teammate&apos;s guid
String guid4 = vars.get(&quot;TeammateGuids2_&quot; + tenant + &quot;_&quot; + rnd2); // get that random teammate&apos;s guid
String guid5 = vars.get(&quot;TeammateGuids1_&quot; + tenant + &quot;_&quot; + rnd1); // get that random teammate&apos;s guid

vars.put(&quot;TeammateGuid1&quot;, guid1);
vars.put(&quot;TeammateGuid2&quot;, guid2);
vars.put(&quot;TeammateGuid3&quot;, guid3);
vars.put(&quot;TeammateGuid4&quot;, guid4);
vars.put(&quot;TeammateGuid5&quot;, guid5);


if (guid1 == null || guid1.length() == 0 || guid2 == null || guid2.length() == 0 )
{
	String errorMsg = &quot;Random teammate GUID is null/blank&quot;;
	log.error(&quot;@@@@ &quot; + errorMsg + &quot; [&quot; + rnd + &quot;] for: [${TenantId}]  User: [${Email}]  Identity: [${Identity}]&quot;);
		
     SampleResult.setSuccessful(false);
     SampleResult.setResponseMessage(errorMsg);
     SampleResult.setStartNextThreadLoop(true);
}

//log.info(&quot;&gt;&gt;&gt;&gt; Posting teammate message [Tenant: ${TenantId}] - [${Identity}] -&gt; [${TeammateGuid}] ...&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Chat application Test Endpoints" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US</stringProp>
              </elementProp>
              <elementProp name="X-Infor-Chat-TenantId" elementType="Header">
                <stringProp name="Header.name">X-Infor-Chat-TenantId</stringProp>
                <stringProp name="Header.value">${TenantId}</stringProp>
              </elementProp>
              <elementProp name="X-Infor-Chat-Identity2" elementType="Header">
                <stringProp name="Header.name">X-Infor-Chat-Identity2</stringProp>
                <stringProp name="Header.value">${Identity}</stringProp>
              </elementProp>
              <elementProp name="X-Infor-Chat-Bearer-Token" elementType="Header">
                <stringProp name="Header.name">X-Infor-Chat-Bearer-Token</stringProp>
                <stringProp name="Header.value">${BearerToken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Infor-Chat-deviceID</stringProp>
                <stringProp name="Header.value">18347ade-8b87-d1d0-1b5d-78dd4a4de02d</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Infor-RequestId</stringProp>
                <stringProp name="Header.value">&gt;portal.35.22.10</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-971810257">GroupPayload</stringProp>
              <stringProp name="638557567">TopicPayload</stringProp>
              <stringProp name="-314292116">TeammatePostPayload</stringProp>
              <stringProp name="-320649153">TopicPostPayload</stringProp>
              <stringProp name="48967210">GroupMembersFragment</stringProp>
              <stringProp name="-1812902635">VARIABLES-BELOW-FOR-DEBUG-ONLY1</stringProp>
              <stringProp name="884550352">UploadGroupPayload</stringProp>
              <stringProp name="1876730535">GroupSearchPayload</stringProp>
              <stringProp name="409916132">TeammateSearchPayload</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-1100713222">
                <stringProp name="-2046360897">${__FileToString(${DATA_FOLDER}/groups/group_1.json,,)}</stringProp>
                <stringProp name="752920767">${__FileToString(${DATA_FOLDER}/topics/topic_1.json,,)}</stringProp>
                <stringProp name="-199479554">${__FileToString(${DATA_FOLDER}/postteammate/postteammate_1.json,,)}</stringProp>
                <stringProp name="-228643682">${__FileToString(${DATA_FOLDER}/posttopic/posttopic_1.json,,)}</stringProp>
                <stringProp name="-654872370">{ &quot;memberId&quot;: &quot;${UserGuid}&quot;, &quot;role&quot;: 1 }</stringProp>
                <stringProp name="1426932138">*************************************</stringProp>
                <stringProp name="1423979844">${__FileToString(${DATA_FOLDER}/updategroup/updategroup_1.json,,)},,)}</stringProp>
                <stringProp name="1860204250">${__FileToString(${DATA_FOLDER}/groupsearch/groupsearch_1.json,)},,)}</stringProp>
                <stringProp name="-526563446">${__FileToString(${DATA_FOLDER}/teammatesearch/teammatesearch_1.json,)},,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Chat Group" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Chat Group" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;name&quot;:&quot;Chat-${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSZ,)}-${TenantId}&quot;,&quot;groupType&quot;:&quot;PUBLIC&quot;,&quot;visibility&quot;:true,&quot;description&quot;:&quot;Sample Group&quot;,&quot;uploadIdentifier&quot;:&quot;&quot;,&quot;members&quot;:[{&quot;memberId&quot;:&quot;${UserGuid}&quot;,&quot;role&quot;:&quot;ADMIN&quot;}],&quot;iFSDistributionGroup&quot;:&quot;false&quot;}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${ChatEndpoint}/api/v1/admin/groups</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Sequential group counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">99999</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">GroupCounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">false</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">// insert the generated group member list fragment into the JSON from Mockaroo

String payload = vars.get(&quot;GroupPayload&quot;);
String memberlist = vars.get(&quot;GroupMembersFragment&quot;);

payload = payload.substring(0, payload.length()-1); // exclude the closing }
payload = payload + &quot;, \&quot;members\&quot;: [&quot; + memberlist + &quot;] }&quot;;
vars.put(&quot;GroupPayload&quot;, payload);

//log.info(&quot;&gt;&gt;&gt;&gt; Sample payload [${TenantId} Group-${GroupCounter}]: &quot; + payload);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse GroupGuid" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">GroupGuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">.groupguid</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">GROUP_GUID_NOT_FOUND</stringProp>
                <stringProp name="Scope.variable">GroupGuid</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse GroupName" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">GroupName</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.name</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">GROUP_NAME_NOT_FOUND</stringProp>
                <stringProp name="Scope.variable">GroupName</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String respCode = SampleResult.getResponseCode();

if (SampleResult.isResponseCodeOK())
{
	String groupGuid = vars.get(&quot;GroupGuid&quot;);
	String groupName = vars.get(&quot;GroupName&quot;);
	
	String errorMsg = null;
	
	if (groupGuid.equals(&quot;GROUP_GUID_NOT_FOUND&quot;))
	{
		log.info(&quot;@@@@ Unable to get Group GUID for new group - [${TenantId} Group-${GroupCounter}] - User: [${Email}]&quot;);
	}
	else if (groupGuid.equals(&quot;GROUP_NAME_NOT_FOUND&quot;))
	{
		log.info(&quot;@@@@ Unable to get Group Name for new group - [${TenantId} Group-${GroupCounter}] - User: [${Email}]&quot;);
	}
	else
	{
		log.info(&quot;&gt;&gt;&gt;&gt; Created Group: [Tenant: ${TenantId}] ${GroupGuid} - ${GroupName} , done by User: [${Email}]  Identity: [${Identity}]&quot;);
	}
}
else
{
	SampleResult.setSuccessful(false);
	SampleResult.setStartNextThreadLoop(true);
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Chat Group" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__eval(${GroupPayload})}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${ChatEndpoint}/api/v1/admin/groups?from=0&amp;to=${MaxUsersPerTenant}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-TenantId" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-TenantId</stringProp>
                  <stringProp name="Header.value">${TenantId}</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-Identity2" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-Identity2</stringProp>
                  <stringProp name="Header.value">${Identity}</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-Bearer-Token" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-Bearer-Token</stringProp>
                  <stringProp name="Header.value">${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-deviceID</stringProp>
                  <stringProp name="Header.value">18347ade-8b87-d1d0-1b5d-78dd4a4de02d</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Infor-RequestId</stringProp>
                  <stringProp name="Header.value">&gt;portal.35.22.10</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Sequential group counter" enabled="false">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">99999</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">GroupCounter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">// insert the generated group member list fragment into the JSON from Mockaroo

String payload = vars.get(&quot;GroupPayload&quot;);
String memberlist = vars.get(&quot;GroupMembersFragment&quot;);

payload = payload.substring(0, payload.length()-1); // exclude the closing }
payload = payload + &quot;, \&quot;members\&quot;: [&quot; + memberlist + &quot;] }&quot;;
vars.put(&quot;GroupPayload&quot;, payload);

//log.info(&quot;&gt;&gt;&gt;&gt; Sample payload [${TenantId} Group-${GroupCounter}]: &quot; + payload);
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse GroupGuid" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">GroupGuid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">.groupguid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">GROUP_GUID_NOT_FOUND</stringProp>
              <stringProp name="Scope.variable">GroupGuid</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse GroupName" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">GroupName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">GROUP_NAME_NOT_FOUND</stringProp>
              <stringProp name="Scope.variable">GroupName</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">String respCode = SampleResult.getResponseCode();

if (SampleResult.isResponseCodeOK())
{
	String groupGuid = vars.get(&quot;GroupGuid&quot;);
	String groupName = vars.get(&quot;GroupName&quot;);
	
	String errorMsg = null;
	
	if (groupGuid.equals(&quot;GROUP_GUID_NOT_FOUND&quot;))
	{
		log.info(&quot;@@@@ Unable to get Group GUID for new group - [${TenantId} Group-${GroupCounter}] - User: [${Email}]&quot;);
	}
	else if (groupGuid.equals(&quot;GROUP_NAME_NOT_FOUND&quot;))
	{
		log.info(&quot;@@@@ Unable to get Group Name for new group - [${TenantId} Group-${GroupCounter}] - User: [${Email}]&quot;);
	}
	else
	{
		log.info(&quot;&gt;&gt;&gt;&gt; Created Group: [Tenant: ${TenantId}] ${GroupGuid} - ${GroupName} , done by User: [${Email}]  Identity: [${Identity}]&quot;);
	}
}
else
{
	SampleResult.setSuccessful(false);
	SampleResult.setStartNextThreadLoop(true);
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Groups for User" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${ChatEndpoint}/api/v1/user/groups</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-TenantId" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-TenantId</stringProp>
                  <stringProp name="Header.value">${TenantId}</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-Identity2" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-Identity2</stringProp>
                  <stringProp name="Header.value">${Identity}</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-Bearer-Token" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-Bearer-Token</stringProp>
                  <stringProp name="Header.value">${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-deviceID</stringProp>
                  <stringProp name="Header.value">18347ade-8b87-d1d0-1b5d-78dd4a4de02d</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Infor-RequestId</stringProp>
                  <stringProp name="Header.value">&gt;portal.35.22.10</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse Group List for Guid" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">GroupGuids_${TenantId}</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.groupHeaders[*].groupguid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="TestPlan.comments">GroupGuids_TenantId_matchNr contains size of the list; Each item is: GroupGuids_TenantId_#</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">String respCode = SampleResult.getResponseCode();

if (SampleResult.isResponseCodeOK())
{
	String tenant = vars.get(&quot;TenantId&quot;);
	String max = vars.get(&quot;GroupGuids_&quot; + tenant + &quot;_matchNr&quot;);
	
	vars.put(&quot;MaxGroups&quot;, max);
	
	if (max == null || Integer.valueOf(max) &lt;= 0)
	{
		String errorMsg = &quot;No groups found for: [${TenantId}]  User: [${Email}]  Identity: [${Identity}]&quot;;
	
		log.info(errorMsg);
	
		// let thread continue... we will stop it when we try to get topics for groups
	}
}
else
{
	SampleResult.setSuccessful(false);
	SampleResult.setStartNextThreadLoop(true);
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get Random Group Guid" enabled="false">
            <stringProp name="BeanShellSampler.query">// get a random group guid
import java.util.concurrent.ThreadLocalRandom;

String max = vars.get(&quot;MaxGroups&quot;);

if (max == null || Integer.valueOf(max) &lt;= 0)
{
	String errorMsg = &quot;No groups found&quot;;
	log.error(&quot;@@@@ &quot; + errorMsg + &quot; for: [${TenantId}]  User: [${Email}]  Identity: [${Identity}]&quot;);

     SampleResult.setSuccessful(false);
     SampleResult.setResponseMessage(errorMsg);
     SampleResult.setStartNextThreadLoop(true);
}
else
{
	int maxgroups = Integer.valueOf(max);
	int rnd = maxgroups &lt;= 1 ? 1 : ThreadLocalRandom.current().nextInt(1, maxgroups);
	
	String tenant = vars.get(&quot;TenantId&quot;);
	String guid = vars.get(&quot;GroupGuids_&quot; + tenant + &quot;_&quot; + rnd); // get that random group&apos;s guid
	
	vars.put(&quot;GroupGuid&quot;, guid);
	
	if (guid == null || guid.length() == 0)
	{
		String errorMsg = &quot;Random group GUID is null/blank&quot;;
		log.error(&quot;@@@@ &quot; + errorMsg + &quot; [&quot; + rnd + &quot;] for: [${TenantId}]  User: [${Email}]  Identity: [${Identity}]&quot;);
		
	     SampleResult.setSuccessful(false);
	     SampleResult.setResponseMessage(errorMsg);
	     SampleResult.setStartNextThreadLoop(true);
	}
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Get Groups" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Groups for User" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${ChatEndpoint}/api/v1/user/groups</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US</stringProp>
                  </elementProp>
                  <elementProp name="X-Infor-Chat-TenantId" elementType="Header">
                    <stringProp name="Header.name">X-Infor-Chat-TenantId</stringProp>
                    <stringProp name="Header.value">${TenantId}</stringProp>
                  </elementProp>
                  <elementProp name="X-Infor-Chat-Identity2" elementType="Header">
                    <stringProp name="Header.name">X-Infor-Chat-Identity2</stringProp>
                    <stringProp name="Header.value">${Identity}</stringProp>
                  </elementProp>
                  <elementProp name="X-Infor-Chat-Bearer-Token" elementType="Header">
                    <stringProp name="Header.name">X-Infor-Chat-Bearer-Token</stringProp>
                    <stringProp name="Header.value">${BearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Infor-Chat-deviceID</stringProp>
                    <stringProp name="Header.value">18347ade-8b87-d1d0-1b5d-78dd4a4de02d</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Infor-RequestId</stringProp>
                    <stringProp name="Header.value">&gt;portal.35.22.10</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse Group List for Guid" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">GroupGuids_${TenantId}</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.groupHeaders[*].groupguid</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="TestPlan.comments">GroupGuids_TenantId_matchNr contains size of the list; Each item is: GroupGuids_TenantId_#</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse Group List for Group Name" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">GroupName_${TenantId}</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.groupHeaders[*].name</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="TestPlan.comments">GroupGuids_TenantId_matchNr contains size of the list; Each item is: GroupGuids_TenantId_#</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String respCode = SampleResult.getResponseCode();

if (SampleResult.isResponseCodeOK())
{
	String tenant = vars.get(&quot;TenantId&quot;);
	String max = vars.get(&quot;GroupGuids_&quot; + tenant + &quot;_matchNr&quot;);
	String max1 = vars.get(&quot;GroupName_&quot; + tenant + &quot;_matchNr&quot;);
	
	vars.put(&quot;MaxGroups&quot;, max);
		vars.put(&quot;MaxGroups1&quot;, max1);
	
	if (max == null || Integer.valueOf(max) &lt;= 0)
	{
		String errorMsg = &quot;No groups found for: [${TenantId}]  User: [${Email}]  Identity: [${Identity}]&quot;;
	
		log.info(errorMsg);
	
		// let thread continue... we will stop it when we try to get topics for groups
	}
}
else
{
	SampleResult.setSuccessful(false);
	SampleResult.setStartNextThreadLoop(true);
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get Random Group Guid" enabled="true">
              <stringProp name="BeanShellSampler.query">// get a random group guid
import java.util.concurrent.ThreadLocalRandom;

String max = vars.get(&quot;MaxGroups&quot;);

if (max == null || Integer.valueOf(max) &lt;= 0)
{
	String errorMsg = &quot;No groups found&quot;;
	log.error(&quot;@@@@ &quot; + errorMsg + &quot; for: [${TenantId}]  User: [${Email}]  Identity: [${Identity}]&quot;);

     SampleResult.setSuccessful(false);
     SampleResult.setResponseMessage(errorMsg);
     SampleResult.setStartNextThreadLoop(true);
}
else
{
	int maxgroups = Integer.valueOf(max);
	int rnd = maxgroups &lt;= 1 ? 1 : ThreadLocalRandom.current().nextInt(1, maxgroups);
	
	String tenant = vars.get(&quot;TenantId&quot;);
	String guid = vars.get(&quot;GroupGuids_&quot; + tenant + &quot;_&quot; + rnd); // get that random group&apos;s guid
	
	vars.put(&quot;Group_Guid&quot;, guid);
	
	if (guid == null || guid.length() == 0)
	{
		String errorMsg = &quot;Random group GUID is null/blank&quot;;
		log.error(&quot;@@@@ &quot; + errorMsg + &quot; [&quot; + rnd + &quot;] for: [${TenantId}]  User: [${Email}]  Identity: [${Identity}]&quot;);
		
	     SampleResult.setSuccessful(false);
	     SampleResult.setResponseMessage(errorMsg);
	     SampleResult.setStartNextThreadLoop(true);
	}
}</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get Random Group Name" enabled="true">
              <stringProp name="BeanShellSampler.query">// get a random group guid
import java.util.concurrent.ThreadLocalRandom;

String max = vars.get(&quot;MaxGroups1&quot;);

if (max == null || Integer.valueOf(max) &lt;= 0)
{
	String errorMsg = &quot;No groupname found&quot;;
	log.error(&quot;@@@@ &quot; + errorMsg + &quot; for: [${TenantId}]  User: [${Email}]  Identity: [${Identity}]&quot;);

     SampleResult.setSuccessful(false);
     SampleResult.setResponseMessage(errorMsg);
     SampleResult.setStartNextThreadLoop(true);
}
else
{
	int maxgroups = Integer.valueOf(max);
	int rnd = maxgroups &lt;= 1 ? 1 : ThreadLocalRandom.current().nextInt(1, maxgroups);
	
	String tenant = vars.get(&quot;TenantId&quot;);
	String Name = vars.get(&quot;GroupName_&quot; + tenant + &quot;_&quot; + rnd); // get that random group&apos;s guid
	
	vars.put(&quot;Group_Name&quot;, Name);
	
	if (Name == null || Name.length() == 0)
	{
		String errorMsg = &quot;Random group name is null/blank&quot;;
		log.error(&quot;@@@@ &quot; + errorMsg + &quot; [&quot; + rnd + &quot;] for: [${TenantId}]  User: [${Email}]  Identity: [${Identity}]&quot;);
		
	     SampleResult.setSuccessful(false);
	     SampleResult.setResponseMessage(errorMsg);
	     SampleResult.setStartNextThreadLoop(true);
	}
}</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Chat Topic" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Chat Topic" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;topicDescription&quot;:&quot;Automation Testing&quot;,&quot;topicMembers&quot;:[&quot;${UserGuid}&quot;],&quot;topicName&quot;:&quot;Topic-${__time(&apos;T&apos;HH:mm:ss.SSSZ,)}&quot;,&quot;addAllGroupMembers&quot;:true}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${ChatEndpoint}/api/v1/admin/groups/${Group_Guid}/topics</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse TopicGuid" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">TopicGuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">.topicGuid</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">TOPIC_GUID_NOT_FOUND</stringProp>
                <stringProp name="Scope.variable">GroupGuid</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse TopicName" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">TopicName</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">.topicName</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">TOPIC_NAME_NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse GroupGuid" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Groupguid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">.groupGuid</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">GROUP_GUID_NOT_FOUND</stringProp>
                <stringProp name="Scope.variable">GroupGuid</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String respCode = SampleResult.getResponseCode();

if (SampleResult.isResponseCodeOK())
{
	String topicGuid = vars.get(&quot;TopicGuid&quot;);
	String topicName = vars.get(&quot;TopicName&quot;);
	String groupGuid = vars.get(&quot;Groupguid&quot;);
	
	String errorMsg = null;
	
	if (topicGuid.equals(&quot;TOPIC_GUID_NOT_FOUND&quot;))
	{
		log.info(&quot;@@@@ Unable to get TOPIC GUID for new group -  [${TenantId}]  User: [${Email}]  Identity: [${Identity}]&quot;);
	}
	else if (groupGuid.equals(&quot;GROUP_GUID_NOT_FOUND&quot;))
	{
		log.info(&quot;@@@@ Unable to get Group Guid for new group - [${TenantId}] - User: [${Email}]&quot;);
	}
	else
	{
		log.info(&quot;&gt;&gt;&gt;&gt; Created TOPIC: [Tenant: ${TenantId}] ${TopicGuid} - ${TopicName} , done by User: [${Email}]  Identity: [${Identity}]&quot;);
	}
}
else
{
	SampleResult.setSuccessful(false);
	SampleResult.setStartNextThreadLoop(true);
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Get Topics" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Topics for Random Group" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${ChatEndpoint}/api/v1/admin/groups/${Group_Guid}/topics</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse Topic List for Guid" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">TopicGuids_${TenantId}</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.topicHeaderList[*].topicGuid</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="TestPlan.comments">TopicGuids_TenantId_GroupGuid_matchNr contains size of the list; Each item is: TopicGuids_TenantId_GroupGuid_#</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String respCode = SampleResult.getResponseCode();

if (SampleResult.isResponseCodeOK())
{
	String tenant = vars.get(&quot;TenantId&quot;);
	String groupguid = vars.get(&quot;GroupGuid&quot;);
	String max = vars.get(&quot;TopicGuids_&quot; + tenant +&quot;_matchNr&quot;);
	
	if (max == null || Integer.valueOf(max) &lt;= 0)
	{
		vars.put(&quot;MaxTopics&quot;, &quot;0&quot;);
		
		String errorMsg = &quot;No topics found&quot;;
		log.error(&quot;@@@@ &quot; + errorMsg + &quot; for: [${TenantId}]  Group: [${GroupGuid}]  User: [${Email}]  Identity: [${Identity}]&quot;);
	
	     SampleResult.setSuccessful(false);
	     SampleResult.setResponseMessage(errorMsg);
	     SampleResult.setStartNextThreadLoop(true);
	}
	else
	{
		vars.put(&quot;MaxTopics&quot;, max);
	}
}
else
{
	SampleResult.setSuccessful(false);
	SampleResult.setStartNextThreadLoop(true);
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get Random Topic Guid" enabled="true">
              <stringProp name="BeanShellSampler.query">// get a random group guid
import java.util.concurrent.ThreadLocalRandom;

String max = vars.get(&quot;MaxTopics&quot;);

if (max == null || Integer.valueOf(max) &lt;= 0)
{
	String errorMsg = &quot;No topics found&quot;;
	log.error(&quot;@@@@ &quot; + errorMsg + &quot; for: [${TenantId}]  User: [${Email}]  Identity: [${Identity}]&quot;);

     SampleResult.setSuccessful(false);
     SampleResult.setResponseMessage(errorMsg);
     SampleResult.setStartNextThreadLoop(true);
}
else
{
	int maxgroups = Integer.valueOf(max);
	int rnd = maxgroups &lt;= 1 ? 1 : ThreadLocalRandom.current().nextInt(1, maxgroups);
	String groupguid = vars.get(&quot;GroupGuid&quot;);
	String tenant = vars.get(&quot;TenantId&quot;);
	String guid = vars.get(&quot;TopicGuids_&quot; + tenant + &quot;_&quot; + rnd); // get that random group&apos;s guid
	
	vars.put(&quot;Topic_Guid&quot;, guid);
	
	if (guid == null || guid.length() == 0)
	{
		String errorMsg = &quot;Random Topic GUID is null/blank&quot;;
		log.error(&quot;@@@@ &quot; + errorMsg + &quot; [&quot; + rnd + &quot;] for: [${TenantId}]  User: [${Email}]  Identity: [${Identity}]&quot;);
		
	     SampleResult.setSuccessful(false);
	     SampleResult.setResponseMessage(errorMsg);
	     SampleResult.setStartNextThreadLoop(true);
	}
}</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Post Messages" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${LoopsPerUser}</stringProp>
            <stringProp name="TestPlan.comments">This loop simulates each user&apos;s actions... ie: if LoopsPerUser=50, then that user is performing 50 things (posting, creating group, etc)</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Message to Random Topic" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;message&quot;:&quot; Account Executive  Vision-oriented disintermediate hardware&quot;,&quot;documentIds&quot;:[],&quot;reactions&quot;:null,&quot;taggedUserGuids&quot;:[],&quot;drillbacks&quot;:[]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${ChatEndpoint}/api/v1/topic/${Topic_Guid}/messages</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse PostedMsg" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">PostedMsg</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.chatMessage.msgText</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">String respCode = SampleResult.getResponseCode();

if (SampleResult.isResponseCodeOK())
{
	log.info(&quot;&gt;&gt;&gt;&gt; Posted topic message [Tenant: ${TenantId}] - [${Email}] -&gt;${PostedMsg}&quot;);
}
else
{
	log.info(&quot;&gt;&gt;&gt;&gt;  unable to Post topic message [Tenant: ${TenantId}] - [${Email}] -&gt;${PostedMsg}&quot;);
	SampleResult.setSuccessful(false);
	SampleResult.setStartNextThreadLoop(true);
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Message to Random Teammate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;message&quot;:&quot;True bravery is doing what is right even when it&apos;s not popular&quot;,&quot;documentIds&quot;:[],&quot;reactions&quot;:null,&quot;taggedUserGuids&quot;:[],&quot;drillbacks&quot;:[]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${ChatEndpoint}/api/v1/user/${TeammateGuid1}/messages</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse PostedMsg" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Posted_Msg</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.chatMessage.msgText</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String respCode = SampleResult.getResponseCode();

if (SampleResult.isResponseCodeOK())
{
	log.info(&quot;&gt;&gt;&gt;&gt; Posted teammate message [Tenant: ${TenantId}] - [${Email}] -&gt; ${PostedMsg}&quot;);
}
else
{
	log.info(&quot;&gt;&gt;&gt;&gt; Unable to Post teamamte message [Tenant: ${TenantId}] - [${Email}] -&gt; ${PostedMsg}&quot;);
	SampleResult.setSuccessful(false);
	SampleResult.setStartNextThreadLoop(true);
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Post message to random topic" enabled="false">
              <boolProp name="PARENT_SAMPLE">true</boolProp>
            </com.blazemeter.jmeter.controller.ParallelSampler>
            <hashTree>
              <com.blazemeter.jmeter.http.ParallelHTTPSampler guiclass="com.blazemeter.jmeter.http.ParallelHTTPSamplerGui" testclass="com.blazemeter.jmeter.http.ParallelHTTPSampler" testname="jp@gc - Parallel HTTP Requests" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <collectionProp name="urls">
                  <collectionProp name="-1326393279">
                    <stringProp name="-928260873">${ChatEndpoint}/api/v1/topic/${Topic_Guid}/messages</stringProp>
                  </collectionProp>
                  <collectionProp name="588817456">
                    <stringProp name="1971252050">${ChatEndpoint}/api/v1/user/${TeammateGuid1}/messages</stringProp>
                  </collectionProp>
                </collectionProp>
              </com.blazemeter.jmeter.http.ParallelHTTPSampler>
              <hashTree/>
            </hashTree>
            <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Post message to random teammate" enabled="false">
              <boolProp name="PARENT_SAMPLE">true</boolProp>
            </com.blazemeter.jmeter.controller.ParallelSampler>
            <hashTree>
              <com.blazemeter.jmeter.http.ParallelHTTPSampler guiclass="com.blazemeter.jmeter.http.ParallelHTTPSamplerGui" testclass="com.blazemeter.jmeter.http.ParallelHTTPSampler" testname="jp@gc - Parallel HTTP Requests" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <collectionProp name="urls">
                  <collectionProp name="-1326393279">
                    <stringProp name="-928260873">${ChatEndpoint}/api/v1/topic/${Topic_Guid}/messages</stringProp>
                  </collectionProp>
                  <collectionProp name="588817456">
                    <stringProp name="1971252050">${ChatEndpoint}/api/v1/user/${TeammateGuid1}/messages</stringProp>
                  </collectionProp>
                </collectionProp>
              </com.blazemeter.jmeter.http.ParallelHTTPSampler>
              <hashTree/>
            </hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Loop Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">5</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">LoopCounter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-971810257">GroupPayload</stringProp>
                <stringProp name="638557567">TopicPayload</stringProp>
                <stringProp name="-314292116">TeammatePostPayload</stringProp>
                <stringProp name="-320649153">TopicPostPayload</stringProp>
                <stringProp name="48967210">GroupMembersFragment</stringProp>
                <stringProp name="-1812902635">VARIABLES-BELOW-FOR-DEBUG-ONLY1</stringProp>
                <stringProp name="-1515042734">FilePayload</stringProp>
                <stringProp name="1749969725">UploadFile</stringProp>
                <stringProp name="884550352">UploadGroupPayload</stringProp>
                <stringProp name="1876730535">GroupSearchPayload</stringProp>
                <stringProp name="409916132">TeammateSearchPayload</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1393654340">
                  <stringProp name="-2046360897">${__FileToString(${DATA_FOLDER}/groups/group_1.json,,)}</stringProp>
                  <stringProp name="752920767">${__FileToString(${DATA_FOLDER}/topics/topic_1.json,,)}</stringProp>
                  <stringProp name="-199479554">${__FileToString(${DATA_FOLDER}/postteammate/postteammate_1.json,,)}</stringProp>
                  <stringProp name="-228643682">${__FileToString(${DATA_FOLDER}/posttopic/posttopic_1.json,,)}</stringProp>
                  <stringProp name="-654872370">{ &quot;memberId&quot;: &quot;${UserGuid}&quot;, &quot;role&quot;: 1 }</stringProp>
                  <stringProp name="1426932138">*************************************</stringProp>
                  <stringProp name="-1277141009">${__FileToString(${DATA_FOLDER}/files/file_1.json,,)}</stringProp>
                  <stringProp name="1276147734">${__FileToString(${DATA_FOLDER}/uploadfiles/file.csv,,)}</stringProp>
                  <stringProp name="1423979844">${__FileToString(${DATA_FOLDER}/updategroup/updategroup_1.json,,)},,)}</stringProp>
                  <stringProp name="1860204250">${__FileToString(${DATA_FOLDER}/groupsearch/groupsearch_1.json,)},,)}</stringProp>
                  <stringProp name="-526563446">${__FileToString(${DATA_FOLDER}/teammatesearch/teammatesearch_1.json,)},,)}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">log.info(&quot;&gt;&gt;&gt;&gt; Creating a group for tenant: [${TenantId}] done by User: [${Email}]  Identity: [${Identity}] ...&quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Generate random NumGroupUsers" enabled="true">
              <stringProp name="maximumValue">5</stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="outputFormat"></stringProp>
              <boolProp name="perThread">true</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">NumGroupUsers</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Generate JSON fragment for group member list" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${NumGroupUsers}</stringProp>
            </LoopController>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Search Messages" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-TenantId" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-TenantId</stringProp>
                  <stringProp name="Header.value">${TenantId}</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-Identity2" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-Identity2</stringProp>
                  <stringProp name="Header.value">${Identity}</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-Bearer-Token" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-Bearer-Token</stringProp>
                  <stringProp name="Header.value">${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-deviceID</stringProp>
                  <stringProp name="Header.value">18347ade-8b87-d1d0-1b5d-78dd4a4de02d</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Infor-RequestId</stringProp>
                  <stringProp name="Header.value">&gt;portal.35.22.10</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Topic Messages" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;topicGuid&quot;:&quot;${Topic_Guid}&quot;,&quot;searchString&quot;:&quot;${PostedMsg}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${ChatEndpoint}/api/v1/search/topic/messages</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Teammate Messages" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;teammateGuid&quot;:&quot;${TeammateGuid1}&quot;,&quot;searchString&quot;:&quot;${Posted_Msg}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${ChatEndpoint}/api/v1/search/teammate/messages</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Loading Messages" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Messages from Random Topics" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${ChatEndpoint}/api/v1/topic/${Topic_Guid}/messages</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US</stringProp>
                  </elementProp>
                  <elementProp name="X-Infor-Chat-TenantId" elementType="Header">
                    <stringProp name="Header.name">X-Infor-Chat-TenantId</stringProp>
                    <stringProp name="Header.value">${TenantId}</stringProp>
                  </elementProp>
                  <elementProp name="X-Infor-Chat-Identity2" elementType="Header">
                    <stringProp name="Header.name">X-Infor-Chat-Identity2</stringProp>
                    <stringProp name="Header.value">${Identity}</stringProp>
                  </elementProp>
                  <elementProp name="X-Infor-Chat-Bearer-Token" elementType="Header">
                    <stringProp name="Header.name">X-Infor-Chat-Bearer-Token</stringProp>
                    <stringProp name="Header.value">${BearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Infor-Chat-deviceID</stringProp>
                    <stringProp name="Header.value">18347ade-8b87-d1d0-1b5d-78dd4a4de02d</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Infor-RequestId</stringProp>
                    <stringProp name="Header.value">&gt;portal.35.22.10</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse Group List for Guid" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">GroupGuids_${TenantId}</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.groupHeaders[*].groupguid</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="TestPlan.comments">GroupGuids_TenantId_matchNr contains size of the list; Each item is: GroupGuids_TenantId_#</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String respCode = SampleResult.getResponseCode();

if (SampleResult.isResponseCodeOK())
{
	String tenant = vars.get(&quot;TenantId&quot;);
	String max = vars.get(&quot;GroupGuids_&quot; + tenant + &quot;_matchNr&quot;);
	
	vars.put(&quot;MaxGroups&quot;, max);
	
	if (max == null || Integer.valueOf(max) &lt;= 0)
	{
		String errorMsg = &quot;No groups found for: [${TenantId}]  User: [${Email}]  Identity: [${Identity}]&quot;;
	
		log.info(errorMsg);
	
		// let thread continue... we will stop it when we try to get topics for groups
	}
}
else
{
	SampleResult.setSuccessful(false);
	SampleResult.setStartNextThreadLoop(true);
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Messages from Random Teammate" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${ChatEndpoint}/api/v1/user/${TeammateGuid1}/messages</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US</stringProp>
                  </elementProp>
                  <elementProp name="X-Infor-Chat-TenantId" elementType="Header">
                    <stringProp name="Header.name">X-Infor-Chat-TenantId</stringProp>
                    <stringProp name="Header.value">${TenantId}</stringProp>
                  </elementProp>
                  <elementProp name="X-Infor-Chat-Identity2" elementType="Header">
                    <stringProp name="Header.name">X-Infor-Chat-Identity2</stringProp>
                    <stringProp name="Header.value">${Identity}</stringProp>
                  </elementProp>
                  <elementProp name="X-Infor-Chat-Bearer-Token" elementType="Header">
                    <stringProp name="Header.name">X-Infor-Chat-Bearer-Token</stringProp>
                    <stringProp name="Header.value">${BearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Infor-Chat-deviceID</stringProp>
                    <stringProp name="Header.value">18347ade-8b87-d1d0-1b5d-78dd4a4de02d</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Infor-RequestId</stringProp>
                    <stringProp name="Header.value">&gt;portal.35.22.10</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse Group List for Guid" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">GroupGuids_${TenantId}</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.groupHeaders[*].groupguid</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="TestPlan.comments">GroupGuids_TenantId_matchNr contains size of the list; Each item is: GroupGuids_TenantId_#</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String respCode = SampleResult.getResponseCode();

if (SampleResult.isResponseCodeOK())
{
	String tenant = vars.get(&quot;TenantId&quot;);
	String max = vars.get(&quot;GroupGuids_&quot; + tenant + &quot;_matchNr&quot;);
	
	vars.put(&quot;MaxGroups&quot;, max);
	
	if (max == null || Integer.valueOf(max) &lt;= 0)
	{
		String errorMsg = &quot;No groups found for: [${TenantId}]  User: [${Email}]  Identity: [${Identity}]&quot;;
	
		log.info(errorMsg);
	
		// let thread continue... we will stop it when we try to get topics for groups
	}
}
else
{
	SampleResult.setSuccessful(false);
	SampleResult.setStartNextThreadLoop(true);
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create chat topic" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;topicDescription&quot;:&quot;Automation Testing&quot;,&quot;topicMembers&quot;:[&quot;${UserGuid}&quot;],&quot;topicName&quot;:&quot;Topic-${__Random(1,100)} ${TenantId}&quot;,&quot;addAllGroupMembers&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${ChatEndpoint}/api/v1/admin/groups/${GroupGuid}/topics</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">TopicGuid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">.topicGuid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">TopicStatus</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">.topicStatus</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">TopicGuid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">.topicGuid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">TopicDescription</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">.topicDescription</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">TopicName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">.topicName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Topics for Random Group" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${ChatEndpoint}/api/v1/admin/groups/${GroupGuid}/topics</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse Topic List for Guid" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">TopicGuids_${TenantId}_${GroupGuid}</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.topicHeaderList[*].topicGuid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="TestPlan.comments">TopicGuids_TenantId_GroupGuid_matchNr contains size of the list; Each item is: TopicGuids_TenantId_GroupGuid_#</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">String respCode = SampleResult.getResponseCode();

if (SampleResult.isResponseCodeOK())
{
	String tenant = vars.get(&quot;TenantId&quot;);
	String groupguid = vars.get(&quot;GroupGuid&quot;);
	String max = vars.get(&quot;TopicGuids_&quot; + tenant + &quot;_&quot; + groupguid + &quot;_matchNr&quot;);
	
	if (max == null || Integer.valueOf(max) &lt;= 0)
	{
		vars.put(&quot;MaxTopics&quot;, &quot;0&quot;);
		
		String errorMsg = &quot;No topics found&quot;;
		log.error(&quot;@@@@ &quot; + errorMsg + &quot; for: [${TenantId}]  Group: [${GroupGuid}]  User: [${Email}]  Identity: [${Identity}]&quot;);
	
	     SampleResult.setSuccessful(false);
	     SampleResult.setResponseMessage(errorMsg);
	     SampleResult.setStartNextThreadLoop(true);
	}
	else
	{
		vars.put(&quot;MaxTopics&quot;, max);
	}
}
else
{
	SampleResult.setSuccessful(false);
	SampleResult.setStartNextThreadLoop(true);
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get Random Teammate Guid" enabled="false">
            <stringProp name="BeanShellSampler.query">// get a random teammate guid
import java.util.concurrent.ThreadLocalRandom;

int usersPerTenant = Integer.valueOf(vars.get(&quot;NumTenantUsers&quot;));
int rnd = usersPerTenant &lt;= 1 ? 1 : ThreadLocalRandom.current().nextInt(1, usersPerTenant);
String tenant = vars.get(&quot;TenantId&quot;);
String guid = vars.get(&quot;TeammateGuids_&quot; + tenant + &quot;_&quot; + rnd); // get that random teammate&apos;s guid

vars.put(&quot;TeammateGuid&quot;, guid);

if (guid == null || guid.length() == 0)
{
	String errorMsg = &quot;Random teammate GUID is null/blank&quot;;
	log.error(&quot;@@@@ &quot; + errorMsg + &quot; [&quot; + rnd + &quot;] for: [${TenantId}]  User: [${Email}]  Identity: [${Identity}]&quot;);
		
     SampleResult.setSuccessful(false);
     SampleResult.setResponseMessage(errorMsg);
     SampleResult.setStartNextThreadLoop(true);
}

//log.info(&quot;&gt;&gt;&gt;&gt; Posting teammate message [Tenant: ${TenantId}] - [${Identity}] -&gt; [${TeammateGuid}] ...&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Message to Random Teammate" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__eval(${TeammatePostPayload})}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${ChatEndpoint}/api/v1/user/${TeammateGuid}/messages</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse PostedMsg" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">PostedMsg</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.chatMessage.msgText</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">String respCode = SampleResult.getResponseCode();

if (SampleResult.isResponseCodeOK())
{
	log.info(&quot;&gt;&gt;&gt;&gt; Posted teammate message [Tenant: ${TenantId}] - [${Email}] -&gt; [${TeammateGuid}] - ${PostedMsg}&quot;);
}
else
{
	SampleResult.setSuccessful(false);
	SampleResult.setStartNextThreadLoop(true);
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Group" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${ChatEndpoint}/api/v1/admin/groups/${GroupGuid}/delete</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Random Group from Group Directory" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"> ${__eval(${GroupSearchPayload})}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${ChatEndpoint}/api/v1/admin/search/groups</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse TopicGuid" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">TopicGuid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">.topicGuid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TOPIC_GUID_NOT_FOUND</stringProp>
              <stringProp name="Scope.variable">GroupGuid</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse TopicName" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">TopicName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">.topicName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TOPIC_NAME_NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse GroupGuid" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Groupguid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">.groupGuid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">GROUP_GUID_NOT_FOUND</stringProp>
              <stringProp name="Scope.variable">GroupGuid</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">String respCode = SampleResult.getResponseCode();

if (SampleResult.isResponseCodeOK())
{
	String topicGuid = vars.get(&quot;TopicGuid&quot;);
	String topicName = vars.get(&quot;TopicName&quot;);
	String groupGuid = vars.get(&quot;Groupguid&quot;);
	
	String errorMsg = null;
	
	if (topicGuid.equals(&quot;TOPIC_GUID_NOT_FOUND&quot;))
	{
		log.info(&quot;@@@@ Unable to get TOPIC GUID for new group -  [${TenantId}]  User: [${Email}]  Identity: [${Identity}]&quot;);
	}
	else if (groupGuid.equals(&quot;GROUP_GUID_NOT_FOUND&quot;))
	{
		log.info(&quot;@@@@ Unable to get Group Guid for new group - [${TenantId}] - User: [${Email}]&quot;);
	}
	else
	{
		log.info(&quot;&gt;&gt;&gt;&gt; Created TOPIC: [Tenant: ${TenantId}] ${TopicGuid} - ${TopicName} , done by User: [${Email}]  Identity: [${Identity}]&quot;);
	}
}
else
{
	SampleResult.setSuccessful(false);
	SampleResult.setStartNextThreadLoop(true);
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Random Teammate from Teammate Directory" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"> ${__eval(${TeammateSearchPayload})}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${ChatEndpoint}/api/v1/user/search/teammates</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse TopicGuid" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">TopicGuid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">.topicGuid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TOPIC_GUID_NOT_FOUND</stringProp>
              <stringProp name="Scope.variable">GroupGuid</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse TopicName" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">TopicName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">.topicName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">TOPIC_NAME_NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse GroupGuid" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Groupguid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">.groupGuid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">GROUP_GUID_NOT_FOUND</stringProp>
              <stringProp name="Scope.variable">GroupGuid</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">String respCode = SampleResult.getResponseCode();

if (SampleResult.isResponseCodeOK())
{
	String topicGuid = vars.get(&quot;TopicGuid&quot;);
	String topicName = vars.get(&quot;TopicName&quot;);
	String groupGuid = vars.get(&quot;Groupguid&quot;);
	
	String errorMsg = null;
	
	if (topicGuid.equals(&quot;TOPIC_GUID_NOT_FOUND&quot;))
	{
		log.info(&quot;@@@@ Unable to get TOPIC GUID for new group -  [${TenantId}]  User: [${Email}]  Identity: [${Identity}]&quot;);
	}
	else if (groupGuid.equals(&quot;GROUP_GUID_NOT_FOUND&quot;))
	{
		log.info(&quot;@@@@ Unable to get Group Guid for new group - [${TenantId}] - User: [${Email}]&quot;);
	}
	else
	{
		log.info(&quot;&gt;&gt;&gt;&gt; Created TOPIC: [Tenant: ${TenantId}] ${TopicGuid} - ${TopicName} , done by User: [${Email}]  Identity: [${Identity}]&quot;);
	}
}
else
{
	SampleResult.setSuccessful(false);
	SampleResult.setStartNextThreadLoop(true);
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get User Notifications" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${ChatEndpoint}/api/v1/user/settings</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse Topic List for Guid" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">TopicGuids_${TenantId}</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.topicHeaderList[*].topicGuid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="TestPlan.comments">TopicGuids_TenantId_GroupGuid_matchNr contains size of the list; Each item is: TopicGuids_TenantId_GroupGuid_#</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
              <stringProp name="BeanShellAssertion.query">String respCode = SampleResult.getResponseCode();

if (SampleResult.isResponseCodeOK())
{
	String tenant = vars.get(&quot;TenantId&quot;);
	String groupguid = vars.get(&quot;GroupGuid&quot;);
	String max = vars.get(&quot;TopicGuids_&quot; + tenant +&quot;_matchNr&quot;);
	
	if (max == null || Integer.valueOf(max) &lt;= 0)
	{
		vars.put(&quot;MaxTopics&quot;, &quot;0&quot;);
		
		String errorMsg = &quot;No topics found&quot;;
		log.error(&quot;@@@@ &quot; + errorMsg + &quot; for: [${TenantId}]  Group: [${GroupGuid}]  User: [${Email}]  Identity: [${Identity}]&quot;);
	
	     SampleResult.setSuccessful(false);
	     SampleResult.setResponseMessage(errorMsg);
	     SampleResult.setStartNextThreadLoop(true);
	}
	else
	{
		vars.put(&quot;MaxTopics&quot;, max);
	}
}
else
{
	SampleResult.setSuccessful(false);
	SampleResult.setStartNextThreadLoop(true);
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.json.JSONObject;

File folder = new File(&quot;${DATA_FOLDER}\\\\${UPLOAD_FILE}\\\\${FILE_TYPE}&quot;);
File[] uploadFiles = folder.listFiles();
Random rnd = new Random();
vars.put(&quot;CURRENT_FILE&quot;, uploadFiles[rnd.nextInt(uploadFiles.length)].getName());</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">

File folder = new File(&quot;${DATA_FOLDER}\\\\${UPLOAD_FILE}\\\\${FILE_TYPE}&quot;);
File[] uploadFiles = folder.listFiles();
Random rnd = new Random();
vars.put(&quot;CURRENT_FILE&quot;, uploadFiles[rnd.nextInt(uploadFiles.length)].getName());</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.json.simple.JSONObject;
import java.io.*;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Random;
import org.apache.commons.io.FileUtils;
File folder = new File(&quot;${DATA_FOLDER}\\\\${UPLOAD_FILE}\\\\${FILE_TYPE}&quot;);
File[] uploadFiles = folder.listFiles();
Random rnd = new Random();
vars.put(&quot;CURRENT_FILE&quot;, uploadFiles[rnd.nextInt(uploadFiles.length)].getName());

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
          </BeanShellSampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-TenantId" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-TenantId</stringProp>
                  <stringProp name="Header.value">${TenantId}</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-Identity2" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-Identity2</stringProp>
                  <stringProp name="Header.value">${Identity}</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-Bearer-Token" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-Bearer-Token</stringProp>
                  <stringProp name="Header.value">${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-deviceID</stringProp>
                  <stringProp name="Header.value">a58a855d-2388-3b24-84bb-84942c2d968b</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Infor-RequestId</stringProp>
                  <stringProp name="Header.value">&gt;portal.34.13.17</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Generate PID" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;item&quot;: {&#xd;
        &quot;attrs&quot;: {&#xd;
            &quot;attr&quot;: [{&#xd;
                &quot;name&quot;: &quot;MDS_ID&quot;, &#xd;
                &quot;value&quot;: &quot;70f74038-1532-1ab5-09ea-${__Random(1,10000000)}&quot;   &#xd;
            }]&#xd;
        },&#xd;
        &quot;resrs&quot;: {&#xd;
            &quot;res&quot;: [{&#xd;
                &quot;filename&quot;:&quot;${CURRENT_FILE}&quot;,&#xd;
                &quot;base64&quot;: &quot;&quot;&#xd;
            }]&#xd;
        },&#xd;
        &quot;acl&quot;: {&#xd;
            &quot;name&quot;: &quot;Private&quot;&#xd;
        },&#xd;
        &quot;entityName&quot;: &quot;Chat_Attachment&quot;&#xd;
    }&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${IDMEndpoint}/IDM/api/items</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-TenantId" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-TenantId</stringProp>
                  <stringProp name="Header.value">${TenantId}</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-Identity2" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-Identity2</stringProp>
                  <stringProp name="Header.value">${Identity}</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-Bearer-Token" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-Bearer-Token</stringProp>
                  <stringProp name="Header.value">${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Infor-RequestId</stringProp>
                  <stringProp name="Header.value">&gt;portal.34.13.17</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor_Filename" enabled="true">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">Filename</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/item/displayName</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
              <stringProp name="Sample.scope">all</stringProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor_Pid" enabled="true">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">Pid</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/item/pid</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
              <stringProp name="Sample.scope">all</stringProp>
            </XPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload the file" enabled="true">
            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
              <collectionProp name="HTTPFileArgs.files">
                <elementProp name="${DATA_FOLDER}${__BeanShell(File.separator,)}${UPLOAD_FILE}${__BeanShell(File.separator,)}${FILE_TYPE}${__BeanShell(File.separator,)}${CURRENT_FILE}" elementType="HTTPFileArg">
                  <stringProp name="File.path">${DATA_FOLDER}${__BeanShell(File.separator,)}${UPLOAD_FILE}${__BeanShell(File.separator,)}${FILE_TYPE}${__BeanShell(File.separator,)}${CURRENT_FILE}</stringProp>
                  <stringProp name="File.paramname"></stringProp>
                  <stringProp name="File.mimetype">application/octet-stream</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${IDMEndpoint}/IDM/api/items/${Pid}/resource?$checkout=true&amp;$checkin=true&amp;$filename=${CURRENT_FILE}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/octet-stream</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-TenantId" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-TenantId</stringProp>
                  <stringProp name="Header.value">${TenantId}</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-Identity2" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-Identity2</stringProp>
                  <stringProp name="Header.value">${Identity}</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-Bearer-Token" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-Bearer-Token</stringProp>
                  <stringProp name="Header.value">${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-deviceID</stringProp>
                  <stringProp name="Header.value">18347ade-8b87-d1d0-1b5d-78dd4a4de02d</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Infor-RequestId</stringProp>
                  <stringProp name="Header.value">&gt;portal.35.22.10</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor_document_Id" enabled="true">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">document_Id</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/item/attrs/attr/value</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
              <stringProp name="Sample.scope">all</stringProp>
            </XPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Attachment in Topic" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;recipient&quot;:&quot;${Topic_Guid}&quot;,&quot;message&quot;:&quot;TEST UPLOAd in jmeter&quot;,&quot;documentIds&quot;:[&quot;${document_Id}&quot;],&quot;base64Audio&quot;:&quot;&quot;,&quot;taggedUserGuids&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${ChatEndpoint}/api/v1/topic/${Topic_Guid}/messages</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-TenantId" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-TenantId</stringProp>
                  <stringProp name="Header.value">${TenantId}</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-Identity2" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-Identity2</stringProp>
                  <stringProp name="Header.value">${Identity}</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-Bearer-Token" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-Bearer-Token</stringProp>
                  <stringProp name="Header.value">${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-deviceID</stringProp>
                  <stringProp name="Header.value">18347ade-8b87-d1d0-1b5d-78dd4a4de02d</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Infor-RequestId</stringProp>
                  <stringProp name="Header.value">&gt;portal.35.22.10</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse PostedTopicMsg" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">PostedTopicMsg</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.chatMessage.msgText</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">String respCode = SampleResult.getResponseCode();

if (SampleResult.isResponseCodeOK())
{
	log.info(&quot;&gt;&gt;&gt;&gt; Posted topic message [Tenant: ${TenantId}] - [${Email}] -&gt; [${TopicGuid}] - ${PostedTopicMsg}&quot;);
}
else
{
	SampleResult.setSuccessful(false);
	SampleResult.setStartNextThreadLoop(true);
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Group" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;groupGuidList&quot;: [&#xd;
    &quot;${GroupGuid}&quot;&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${ChatEndpoint}/api/v1/admin/groups/delete</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-TenantId" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-TenantId</stringProp>
                  <stringProp name="Header.value">${TenantId}</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-Identity2" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-Identity2</stringProp>
                  <stringProp name="Header.value">${Identity}</stringProp>
                </elementProp>
                <elementProp name="X-Infor-Chat-Bearer-Token" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-Bearer-Token</stringProp>
                  <stringProp name="Header.value">${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Infor-Chat-deviceID</stringProp>
                  <stringProp name="Header.value">18347ade-8b87-d1d0-1b5d-78dd4a4de02d</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Infor-RequestId</stringProp>
                  <stringProp name="Header.value">&gt;portal.35.22.10</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="IDM Endpoints" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="X-Infor-Chat-TenantId" elementType="Header">
                <stringProp name="Header.name">X-Infor-Chat-TenantId</stringProp>
                <stringProp name="Header.value">${TenantId}</stringProp>
              </elementProp>
              <elementProp name="X-Infor-Chat-Identity2" elementType="Header">
                <stringProp name="Header.name">X-Infor-Chat-Identity2</stringProp>
                <stringProp name="Header.value">${Identity}</stringProp>
              </elementProp>
              <elementProp name="X-Infor-Chat-Bearer-Token" elementType="Header">
                <stringProp name="Header.name">X-Infor-Chat-Bearer-Token</stringProp>
                <stringProp name="Header.value">${BearerToken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Infor-Chat-deviceID</stringProp>
                <stringProp name="Header.value">a58a855d-2388-3b24-84bb-84942c2d968b</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Infor-RequestId</stringProp>
                <stringProp name="Header.value">&gt;portal.34.13.17</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/octet-stream</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-971810257">GroupPayload</stringProp>
              <stringProp name="638557567">TopicPayload</stringProp>
              <stringProp name="-314292116">TeammatePostPayload</stringProp>
              <stringProp name="-320649153">TopicPostPayload</stringProp>
              <stringProp name="48967210">GroupMembersFragment</stringProp>
              <stringProp name="-1812902635">VARIABLES-BELOW-FOR-DEBUG-ONLY1</stringProp>
              <stringProp name="-1515042734">FilePayload</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-863664267">
                <stringProp name="-2046360897">${__FileToString(${DATA_FOLDER}/groups/group_1.json,,)}</stringProp>
                <stringProp name="752920767">${__FileToString(${DATA_FOLDER}/topics/topic_1.json,,)}</stringProp>
                <stringProp name="-199479554">${__FileToString(${DATA_FOLDER}/postteammate/postteammate_1.json,,)}</stringProp>
                <stringProp name="-228643682">${__FileToString(${DATA_FOLDER}/posttopic/posttopic_1.json,,)}</stringProp>
                <stringProp name="-654872370">{ &quot;memberId&quot;: &quot;${UserGuid}&quot;, &quot;role&quot;: 1 }</stringProp>
                <stringProp name="1426932138">*************************************</stringProp>
                <stringProp name="-1277141009">${__FileToString(${DATA_FOLDER}/files/file_1.json,,)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import java.util.concurrent.ThreadLocalRandom;

int usersPerTenant = Integer.valueOf(vars.get(&quot;NumTenantUsers&quot;));
int rnd = usersPerTenant &lt;= 1 ? 1 : ThreadLocalRandom.current().nextInt(1, usersPerTenant);
String tenant = vars.get(&quot;TenantId&quot;);
String guid = vars.get(&quot;TeammateGuids_&quot; + tenant + &quot;_&quot; + rnd);

String fragment = &quot;, { \&quot;memberId\&quot;: \&quot;&quot; + guid + &quot;\&quot;, \&quot;role\&quot;: 2 }&quot;;

String memberlist = vars.get(&quot;GroupMembersFragment&quot;); // initialized in User Parameters with logged in user as admin
vars.put(&quot;GroupMembersFragment&quot;, memberlist + fragment);
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Attachment with message" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;recipient&quot;:&quot;&quot;,&quot;message&quot;:&quot;TEST UPLOAd in jmeter&quot;,&quot;documentIds&quot;:[&quot;${document_Id}&quot;],&quot;base64Audio&quot;:&quot;&quot;,&quot;taggedUserGuids&quot;:[]}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${ChatEndpoint}/api/v1/topic/${GroupMembersFragment}/messages</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get Random Topic Guid" enabled="false">
            <stringProp name="BeanShellSampler.query">// get a random topic guid
import java.util.concurrent.ThreadLocalRandom;

String max = vars.get(&quot;MaxTopics&quot;);

if (max == null || Integer.valueOf(max) &lt;= 0)
{
	String errorMsg = &quot;No topics found&quot;;
	log.error(&quot;@@@@ &quot; + errorMsg + &quot; for: [${TenantId}]  Group: [${GroupGuid}]  User: [${Email}]  Identity: [${Identity}]&quot;);
		
     SampleResult.setSuccessful(false);
     SampleResult.setResponseMessage(errorMsg);
     SampleResult.setStartNextThreadLoop(true);
}

int maxtopics = Integer.valueOf(max);
int rnd = maxtopics &lt;= 1 ? 1 : ThreadLocalRandom.current().nextInt(1, maxtopics);

String tenant = vars.get(&quot;TenantId&quot;);
String groupguid = vars.get(&quot;GroupGuid&quot;);
String guid = vars.get(&quot;TopicGuids_&quot; + tenant + &quot;_&quot; + groupguid + &quot;_&quot; + rnd); // get that random topic&apos;s guid

vars.put(&quot;TopicGuid&quot;, guid);

if (guid == null || guid.length() == 0)
{
	String errorMsg = &quot;Random topic GUID is null/blank&quot;;
	log.error(&quot;@@@@ &quot; + errorMsg + &quot; [&quot; + rnd + &quot;] for: [${TenantId}]  User: [${Email}]  Identity: [${Identity}]&quot;);
	
     SampleResult.setSuccessful(false);
     SampleResult.setResponseMessage(errorMsg);
     SampleResult.setStartNextThreadLoop(true);
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Message to Random Topic" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__eval(${TopicPostPayload})}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${ChatEndpoint}/api/v1/topic/${TopicGuid}/messages</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parse PostedTopicMsg" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">PostedTopicMsg</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.chatMessage.msgText</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">String respCode = SampleResult.getResponseCode();

if (SampleResult.isResponseCodeOK())
{
	log.info(&quot;&gt;&gt;&gt;&gt; Posted topic message [Tenant: ${TenantId}] - [${Email}] -&gt; [${TopicGuid}] - ${PostedTopicMsg}&quot;);
}
else
{
	SampleResult.setSuccessful(false);
	SampleResult.setStartNextThreadLoop(true);
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="49586">200</stringProp>
          </collectionProp>
          <stringProp name="Assertion.custom_message">Failed due to response code is not 200</stringProp>
          <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">8</intProp>
        </ResponseAssertion>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
